#!/bin/bash --login

. /lib/lsb/init-functions
[ -e /etc/captiveportal.conf ] && . /etc/captiveportal.conf

die() { log_daemon_msg "$@"; log_end_msg 1; exit 1; }

# check that we're run as root
[ `id -u` -eq 0 ] || die "ERROR: this script must be run as root"

USAGE="Usage: $0 {start|stop|restart|status} <app_name (optional)>"

MONIT_INITD=/etc/init.d/monit
[ -e ${MONIT_INITD} ] || die "ERROR: ${MONIT_INITD} not found.  Make sure monit is installed."

PS1="fake_prompt_for_root$" source /root/.bashrc

APP_LIST="web_server splash_server dns_server app_server aaa_server soap_radius db_server rabbitmq_server load_balancer keepalived"

# default all RUN_<app_name> variables to 0 (in case it's not defined in /etc/captiveportal.conf)
for app in ${APP_LIST}; do
    var_name="$(echo RUN_${app} | awk '{print toupper($0)}')"
    eval ${var_name}=${!var_name:-0}
done

pid_file_exists() {
    [ -z $1 ] && echo "Missing process name" && return 1
    if [ $1 = "web_server" ]; then
        [ -f "/var/run/apache2/apache2.pid" ]
        [ -s "/var/run/apache2/apache2.pid" ]
    elif [ $1 = "splash_server" ]; then
        [ -f "/var/run/splash_server.pid" ]
        [ -s "/var/run/splash_server.pid" ]
    elif [ $1 = "dns_server" ]; then
        [ -f "/var/run/named/named.pid" ]
        [ -s "/var/run/named/named.pid" ]
    elif [ $1 = "app_server" ]; then
        [ -f "/u04/jboss/bin/jboss.pid" ]
        [ -s "/u04/jboss/bin/jboss.pid" ]
    elif [ $1 = "soap_radius" ]; then
        [ -f "/var/run/soap_radius.pid" ]
        [ -s "/var/run/soap_radius.pid" ]
    elif [ $1 = "aaa_server" ]; then
        [ -f "/usr/local/var/run/radiusd/radiusd.pid" ]
        [ -s "/usr/local/var/run/radiusd/radiusd.pid" ]
    elif [ $1 = "db_server" ]; then
        [ -f "/var/run/mysqld/mysqld.pid" ]
        [ -s "/var/run/mysqld/mysqld.pid" ]
    elif [ $1 = "redis_server" ]; then
        [ -f "/var/run/redis/redis-server.pid" ]
        [ -s "/var/run/redis/redis-server.pid" ]
    elif [ $1 = "mongodb_server" ]; then
        [ -f "/var/lib/mongodb/mongod.lock" ]
        [ -s "/var/lib/mongodb/mongod.lock" ]
    elif [ $1 = "rabbitmq_server" ]; then
        [ -f "/var/lib/rabbitmq/mnesia/rabbit.pid" ]
        [ -s "/var/lib/rabbitmq/mnesia/rabbit.pid" ]
    elif [ $1 = "load_balancer" ]; then
        [ -f "/opt/nginx/logs/nginx.pid" ]
        [ -s "/opt/nginx/logs/nginx.pid" ]
    elif [ $1 = "keepalived" ]; then
        [ -f "/var/run/keepalived.pid" ]
        [ -s "/var/run/keepalived.pid" ]
    fi
}

get_pid() {
    if [ $1 == "web_server" ]; then
        echo "$(cat /var/run/apache2/apache2.pid)"
    elif [ $1 == "splash_server" ]; then
        echo "$(cat /var/run/splash_server.pid)"
    elif [ $1 == "dns_server" ]; then
        echo "$(cat /var/run/named/named.pid)"
    elif [ $1 == "app_server" ]; then 
        echo "$(cat /u04/jboss/bin/jboss.pid)"
    elif [ $1 == "aaa_server" ]; then 
        echo "$(cat /usr/local/var/run/radiusd/radiusd.pid)"
    elif [ $1 == "soap_radius" ]; then
        echo "$(cat /var/run/soap_radius.pid)"
    elif [ $1 == "db_server" ]; then 
        echo "$(cat /var/run/mysqld/mysqld.pid)"
    elif [ $1 == "redis_server" ]; then 
        echo "$(cat /var/run/redis/redis-server.pid)"
    elif [ $1 == "mongodb_server" ]; then
        echo "$(cat /var/lib/mongodb/mongod.lock)"
    elif [ $1 == "rabbitmq_server" ]; then
        echo "$(cat /var/lib/rabbitmq/mnesia/rabbit.pid)"
    elif [ $1 == "load_balancer" ]; then
        echo "$(cat /opt/nginx/logs/nginx.pid)"
    elif [ $1 == "keepalived" ]; then
        echo "$(cat /var/run/keepalived.pid)"
    fi
}

is_running() {
    [ -z $1 ] && echo "Missing process name" && return 1
    PID=$(get_pid $1)
    [ -d /proc/${PID} ]
}

stop_process() {
    [ -z $1 ] && echo "Missing process name" && return 1
    PID=$(get_pid $1)
    #echo "Killing process $PID"
    kill ${PID}
    sleep 3
}

remove_pid_file() {
    [ -z $1 ] && echo "Missing process name" && return 1
    if [ $1 == "web_server" ]; then
        rm -rf /var/run/apache2/apache2.pid
    elif [ $1 == "splash_server" ]; then
        rm -rf /var/run/splash_server.pid
    elif [ $1 == "dns_server" ]; then
        rm -rf /var/run/named/named.pid
    elif [ $1 == "app_server" ]; then
        rm -rf /u04/jboss/bin/jboss.pid
    elif [ $1 == "aaa_server" ]; then
        rm -rf /usr/local/var/run/radiusd/radiusd.pid
    elif [ $1 == "soap_radius" ]; then
        rm -rf /var/run/soap_radius.pid
    elif [ $1 == "db_server" ]; then
        rm -rf /var/run/mysqld/mysqld.pid
    elif [ $1 == "redis_server" ]; then
        rm -rf /var/run/redis/redis-server.pid
    elif [ $1 == "mongodb_server" ]; then
        rm -rf /var/lib/mongodb/mongod.lock
    elif [ $1 == "rabbitmq_server" ]; then
        rm -rf /var/lib/rabbitmq/mnesia/rabbit.pid
    elif [ $1 == "load_balancer" ]; then
        rm -rf /opt/nginx/logs/nginx.pid
    elif [ $1 == "keepalived" ]; then
        rm -rf /var/run/keepalived.pid
    fi
}

start_web_server() {
    APP_NAME='web_server'
    var_name="$(echo RUN_${APP_NAME} | awk '{print toupper($0)}')"
    if [ "${!var_name}" = "1" ]; then
        if pid_file_exists ${APP_NAME}; then
            if is_running ${APP_NAME}; then
                PID=$(get_pid ${APP_NAME})
                echo "$APP_NAME already running with pid $PID"
                return 1
            else
                echo "$APP_NAME stopped, but pid file exists"
                echo "Removing pid file"
                remove_pid_file ${APP_NAME}
            fi
        fi
    
        echo -e "Starting ${APP_NAME}..."
        /etc/cp-templates/scripts/web_conf_update.sh
        /etc/init.d/apache2 start > /dev/null 2>&1
        ln -sf /etc/cp-templates/monit/conf.d/10-${APP_NAME} /etc/monit/conf.d/.
        echo "$APP_NAME started with pid $(get_pid ${APP_NAME})"
    else
        echo -e "${APP_NAME} is disabled"
    fi    
}

start_splash_server() {
    APP_NAME='splash_server'
    var_name="$(echo RUN_${APP_NAME} | awk '{print toupper($0)}')"
    if [ "${!var_name}" = "1" ]; then
        if pid_file_exists ${APP_NAME}; then
            if is_running ${APP_NAME}; then
                PID=$(get_pid ${APP_NAME})
                echo "$APP_NAME already running with pid $PID"
                return 1
            else
                echo "$APP_NAME stopped, but pid file exists"
                echo "Removing pid file"
                remove_pid_file ${APP_NAME}
            fi
        fi

        echo -e "Starting ${APP_NAME}..."
        /etc/cp-templates/scripts/web_conf_update.sh
        /root/scripts/splashserverd start > /dev/null 2>&1
        ln -sf /etc/cp-templates/monit/conf.d/09-${APP_NAME} /etc/monit/conf.d/.
	sleep 3
        echo "$APP_NAME started with pid $(get_pid ${APP_NAME})"
    else
        echo -e "${APP_NAME} is disabled"
    fi        
}

start_app_server() {
    if [[ ${RUN_WEB_SERVER} -eq 0 && ${RUN_APP_SERVER} -eq 1 ]]; then
          RUN_WEB_SERVER=1
          start_web_server > /dev/null 2>&1
    fi
    APP_NAME='app_server'
    var_name="$(echo RUN_${APP_NAME} | awk '{print toupper($0)}')"
    if [ "${!var_name}" = "1" ]; then    
        if pid_file_exists ${APP_NAME}; then
            if is_running ${APP_NAME}; then
                PID=$(get_pid ${APP_NAME})
                echo "$APP_NAME already running with pid $PID"
                return 1
            else
                echo "$APP_NAME stopped, but pid file exists"
                echo "Removing pid file and starting"
                remove_pid_file ${APP_NAME}
            fi
        fi
    
        echo -e "Starting ${APP_NAME}..."
        /etc/cp-templates/scripts/app_conf_update.sh
        /etc/init.d/jboss-as start > /dev/null 2>&1
        ln -sf /etc/cp-templates/monit/conf.d/07-${APP_NAME} /etc/monit/conf.d/.
        echo "$APP_NAME started with pid $(get_pid ${APP_NAME})"
    else
        echo -e "${APP_NAME} is disabled"
    fi  
}

start_soap_radius() {
    APP_NAME='soap_radius'
    var_name="$(echo RUN_${APP_NAME} | awk '{print toupper($0)}')"
    if [ "${!var_name}" = "1" ]; then
        if pid_file_exists ${APP_NAME}; then
            if is_running ${APP_NAME}; then
                PID=$(get_pid ${APP_NAME})
                echo "$APP_NAME already running with pid $PID"                
                return 1  
            else
                echo "$APP_NAME stopped, but pid file exists"
                echo "Removing pid file"
                remove_pid_file ${APP_NAME}
	        fi
        fi    

        echo -e "Starting $APP_NAME"
        /etc/cp-templates/scripts/aaa_conf_update.sh
	remove_pid_file ${APP_NAME}
        /root/scripts/soapradiusd start > /dev/null 2>&1
        if [ $? -eq 1 ]; then
            echo "failed to start $APP_NAME"
        fi
	sleep 3
        echo "$APP_NAME started with pid $(get_pid ${APP_NAME})"
    else
        echo -e "${APP_NAME} is disabled"
	return 1
    fi  
}

start_aaa_server() {
    APP_NAME='aaa_server'
    var_name="$(echo RUN_${APP_NAME} | awk '{print toupper($0)}')"
    if [ "${!var_name}" = "1" ]; then
        if pid_file_exists ${APP_NAME}; then
            if is_running ${APP_NAME}; then
                PID=$(get_pid ${APP_NAME})
                echo "$APP_NAME already running with pid $PID"
                return 1 
            else
                echo "$APP_NAME stopped, but pid file exists"
                echo "Removing pid file"
                remove_pid_file ${APP_NAME}      
	        fi
        fi    
        
        echo -e "Starting $APP_NAME"
	if pid_file_exists soap_radius; then
	    if is_running soap_radius; then
            	/etc/cp-templates/scripts/aaa_conf_update.sh
		/root/scripts/radiusd start
        	ln -sf /etc/cp-templates/monit/conf.d/06-${APP_NAME} /etc/monit/conf.d/.
		sleep 3
        	echo "$APP_NAME started with pid $(get_pid ${APP_NAME})"
	    else 
		start_soap_radius
		if [ $? -eq 0 ]; then
		    APP_NAME=aaa_server
	            /etc/cp-templates/scripts/aaa_conf_update.sh
                    /root/scripts/radiusd start
               	    ln -sf /etc/cp-templates/monit/conf.d/06-${APP_NAME} /etc/monit/conf.d/.
	            sleep 3
        	    echo "$APP_NAME started with pid $(get_pid ${APP_NAME})"
		else
		    echo "soap_radius is disabled or not running. Make sure soap_radius is enabled and running before starting aaa_server"
		fi
	    fi
	else
            start_soap_radius
	    if [ $? -eq 0 ]; then
		APP_NAME=aaa_server
                /etc/cp-templates/scripts/aaa_conf_update.sh
                /root/scripts/radiusd start
                ln -sf /etc/cp-templates/monit/conf.d/06-${APP_NAME} /etc/monit/conf.d/.
	        sleep 3
                echo "$APP_NAME started with pid $(get_pid ${APP_NAME})"
	    else
		echo "soap_radius is disabled or not running. Make sure soap_radius is enabled and running before starting aaa_server"
	    fi
	fi
    else
        echo -e "${APP_NAME} is disabled"
    fi      
}

start_db_server() {
    APP_NAME='db_server'
    var_name="$(echo RUN_${APP_NAME} | awk '{print toupper($0)}')"
    if [ "${!var_name}" = "1" ]; then    
        if pid_file_exists ${APP_NAME}; then
            if is_running ${APP_NAME}; then
                PID=$(get_pid ${APP_NAME})
                echo "$APP_NAME already running with pid $PID"
                return 1
            else
                echo "$APP_NAME stopped, but pid file exists"
                echo "Removing pid file"
                remove_pid_file ${APP_NAME}
            fi
        fi
    
        echo -e "Starting ${APP_NAME}..."
        /etc/cp-templates/scripts/db_conf_update.sh
        /etc/init.d/mysql start > /dev/null 2>&1
        ln -sf /etc/cp-templates/monit/conf.d/05-${APP_NAME} /etc/monit/conf.d/.
        echo "$APP_NAME started with pid $(get_pid ${APP_NAME})"
    else
        echo -e "${APP_NAME} is disabled"
    fi  
}

start_dns_server() {
    APP_NAME='dns_server'
    var_name="$(echo RUN_${APP_NAME} | awk '{print toupper($0)}')"
    if [ "${!var_name}" = "1" ]; then
        if pid_file_exists ${APP_NAME}; then
            if is_running ${APP_NAME}; then
                PID=$(get_pid ${APP_NAME})
                echo "$APP_NAME already running with pid $PID"
                return 1
            else
                echo "$APP_NAME stopped, but pid file exists"
                echo "Removing pid file"
                remove_pid_file ${APP_NAME}
            fi
        fi

        echo -e "Starting ${APP_NAME}..."
        /etc/cp-templates/scripts/dns_conf_update.sh
	/root/scripts/dnsmanagerd restart > /dev/null 2>&1
        /etc/init.d/bind9 start > /dev/null 2>&1
        ln -sf /etc/cp-templates/monit/conf.d/08-${APP_NAME} /etc/monit/conf.d/.
	sleep 3
        echo "$APP_NAME started with pid $(get_pid ${APP_NAME})"
    else
        echo -e "${APP_NAME} is disabled"
    fi
}

start_redis_server() {
    APP_NAME='redis_server'
    var_name="$(echo RUN_${APP_NAME} | awk '{print toupper($0)}')"
    if [ "${!var_name}" = "1" ]; then    
        if pid_file_exists ${APP_NAME}; then
            if is_running ${APP_NAME}; then
                PID=$(get_pid ${APP_NAME})
                echo "$APP_NAME already running with pid $PID"
                return 1
            else
                echo "$APP_NAME stopped, but pid file exists"
                echo "Removing pid file"
                remove_pid_file ${APP_NAME}
            fi
        fi
    
        echo -e "Starting ${APP_NAME}..."
        #/etc/cp-templates/scripts/redis_conf_update.sh
        /etc/init.d/redis_server start
        ln -sf /etc/cp-templates/monit/conf.d/04-${APP_NAME} /etc/monit/conf.d/.
        echo "$APP_NAME started with pid $(get_pid ${APP_NAME})"
    else
        echo -e "${APP_NAME} is disabled"
    fi  
}

start_mongodb_server() {
    APP_NAME='mongodb_server'
    var_name="$(echo RUN_${APP_NAME} | awk '{print toupper($0)}')"
    if [ "${!var_name}" = "1" ]; then
      if pid_file_exists ${APP_NAME}; then
        if is_running ${APP_NAME}; then
          PID=$(get_pid ${APP_NAME})
          echo "$APP_NAME already running with pid $PID"
          return 1
        else
          echo "$APP_NAME stopped, but pid file exists"
          echo "Removing pid file"
          remove_pid_file ${APP_NAME}
        fi
      fi
      echo -e "Starting ${APP_NAME}..."
      touch /var/lib/mongodb/mongod.lock
      chown mongodb:mongodb /var/lib/mongodb/mongod.lock
      #/etc/cp-templates/scripts/mongo_conf_update.sh
      /bin/systemctl start mongod
      ln -sf /etc/cp-templates/monit/conf.d/03-${APP_NAME} /etc/monit/conf.d/.
      sleep 5
      echo "$APP_NAME started with pid $(get_pid ${APP_NAME})"
    else
      echo -e "${APP_NAME} is disabled"
    fi
}

start_rabbitmq_server() {
    APP_NAME='rabbitmq_server'
    var_name="$(echo RUN_${APP_NAME} | awk '{print toupper($0)}')"
    if [ "${!var_name}" = "1" ]; then
      if pid_file_exists ${APP_NAME}; then
        if is_running ${APP_NAME}; then
          PID=$(get_pid ${APP_NAME})
          echo "$APP_NAME already running with pid $PID"
          return 1
        else
          echo "$APP_NAME stopped, but pid file exists"
          echo "Removing pid file"
          remove_pid_file ${APP_NAME}
        fi
      fi
      echo -e "Starting ${APP_NAME}..."
      /etc/cp-templates/scripts/rabbitmq_conf_update.sh
      /bin/systemctl start rabbitmq-server
      ln -sf /etc/cp-templates/monit/conf.d/02-${APP_NAME} /etc/monit/conf.d/.
      sleep 3
      echo "$APP_NAME started with pid $(get_pid ${APP_NAME})"
    else
      echo -e "${APP_NAME} is disabled"
    fi
}

start_load_balancer() {
    APP_NAME='load_balancer'
    var_name="$(echo RUN_${APP_NAME} | awk '{print toupper($0)}')"
    if [ "${!var_name}" = "1" ]; then
      if pid_file_exists ${APP_NAME}; then
        if is_running ${APP_NAME}; then
          PID=$(get_pid ${APP_NAME})
          echo "$APP_NAME already running with pid $PID"
          return 1
        else
          echo "$APP_NAME stopped, but pid file exists"
          echo "Removing pid file"
          remove_pid_file ${APP_NAME}
        fi
      fi
      echo -e "Starting ${APP_NAME}..."
      #/etc/cp-templates/scripts/rabbitmq_conf_update.sh
      /etc/init.d/nginx start
      #ln -sf /etc/cp-templates/monit/conf.d/02-${APP_NAME} /etc/monit/conf.d/.
      sleep 3
      echo "$APP_NAME started with pid $(get_pid ${APP_NAME})"
    else
      echo -e "${APP_NAME} is disabled"
    fi
}

start_keepalived() {
    APP_NAME='keepalived'
    var_name="$(echo RUN_${APP_NAME} | awk '{print toupper($0)}')"
    if [ "${!var_name}" = "1" ]; then
      if pid_file_exists ${APP_NAME}; then
        if is_running ${APP_NAME}; then
          PID=$(get_pid ${APP_NAME})
          echo "$APP_NAME already running with pid $PID"
          return 1
        else
          echo "$APP_NAME stopped, but pid file exists"
          echo "Removing pid file"
          remove_pid_file ${APP_NAME}
        fi
      fi
      echo -e "Starting ${APP_NAME}..."
      #/etc/cp-templates/scripts/keepalived_conf_update.sh
      /bin/systemctl start keepalived
      #ln -sf /etc/cp-templates/monit/conf.d/01-${APP_NAME} /etc/monit/conf.d/.
      sleep 3
      echo "$APP_NAME started with pid $(get_pid ${APP_NAME})"
    else
      echo -e "${APP_NAME} is disabled"
    fi
}



stop_app() {
    [ -z $1 ] && echo "Missing process name" && return 1
    APP_NAME=$1
    rm /etc/monit/conf.d/*-${APP_NAME} > /dev/null 2>&1
    ${MONIT_INITD} reload > /dev/null 2>&1
    
    if pid_file_exists ${APP_NAME}; then
        echo -e "Stopping $APP_NAME ..."
        if is_running ${APP_NAME}; then
            stop_process ${APP_NAME}
            remove_pid_file ${APP_NAME}
            echo "stopped"
        else
            echo "${APP_NAME} already stopped, but pid file exists - removing"
            remove_pid_file ${APP_NAME}
            return 1
        fi
    else
        echo "$APP_NAME already stopped"
        return 1
    fi
}

status_app() {
    [ -z $1 ] && echo "Missing process name" && return 1
    APP_NAME=$1
    if pid_file_exists ${APP_NAME}; then
        if is_running ${APP_NAME}; then
            PID=$(get_pid ${APP_NAME})
	    printf "%-22s  %-7s (pid $PID)\n" ${APP_NAME} "running"
        else
            printf "%-22s  %-7s, but pid file exists\n" ${APP_NAME} "stopped"
        fi
    else
        state="stopped"
        var_name="$(echo RUN_${APP_NAME} | awk '{print toupper($0)}')"
        if [ -z ${!var_name} -o "${!var_name}" = "0" ]; then
            state="disabled"
        fi
        printf "%-22s  %-7s\n" ${APP_NAME} "${state}"
    fi
}

start_apps() {
    for app in ${APP_LIST}; do
        var_name="$(echo RUN_${app} | awk '{print toupper($0)}')"
        if [ "${!var_name}" = "1" ]; then
            eval start_${app}
            #ln -sf /etc/cp-templates/monit/conf.d/${app} /etc/monit/conf.d/.
        fi
    done
}

stop_apps() {
    for app in ${APP_LIST}; do
        stop_app ${app} "no_monit"
    done
}
status_apps() {
    echo "Captive Portal Status:"
    printf "%-22s  %-7s\n" "Process" "State"
    printf "%-22s  %-7s\n" "-------" "-----"
    for app in ${APP_LIST}; do
        status_app ${app}
    done
}

case "$1" in
    start)
        if [ -z $2 ]; then
            start_apps
        else
            eval start_${2}
            #ln -sf /etc/cp-templates/monit/conf.d/${2} /etc/monit/conf.d/.
        fi
        ${MONIT_INITD} reload > /dev/null 2>&1
        ;;

    stop)
        if [ -z $2 ]; then
            stop_apps
        else
            stop_app $2
        fi
        ;;

    restart)
        if [ -z $2 ]; then
            stop_apps
            start_apps
        else
            stop_app $2
            eval start_${2}
            #ln -sf /etc/cp-templates/monit/conf.d/${2} /etc/monit/conf.d/.
        fi
        ${MONIT_INITD} reload > /dev/null 2>&1
        ;;

    status)
        status_apps
        ;;

    *)
        echo $USAGE
        exit 1
        ;;
esac
